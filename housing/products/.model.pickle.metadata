{"timestamp": 1667619681.554571, "stored_source_code": "# Add description here\n#\n# *Note:* You can open this file as a notebook (JupyterLab: right-click on it in the side bar -> Open With -> Notebook)\n# Uncomment the next two lines to enable auto reloading for imported modules\n# %load_ext autoreload\n# %autoreload 2\n# For more info, see:\n# https://docs.ploomber.io/en/latest/user-guide/faq_index.html#auto-reloading-code-in-jupyter\n# If this task has dependencies, list them them here\n# (e.g. upstream = ['some_task']), otherwise leave as None.\nupstream = ['clean']\n\n# This is a placeholder, leave it as None\nproduct = None\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\ndf = pd.read_csv(upstream['clean']['data'])\n#Home prices based off sqft\nvar = 'Sqft'\ndata = pd.concat([df['Price'], df[var]], axis=1)\ndata.plot.scatter(x=var, y='Price', ylim=(0,800000),xlim=(1000,5000));\n#Whats the frequency of houses in different price ranges\nsns.distplot(df['Price'] , fit=norm);\n\n#  the fitted parameters used by the function\n(mu, sigma) = norm.fit(df['Price'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n# plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('Price distribution - $100ks')\nplt.xlim(0,1000000)\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['Price'], plot=plt)\nplt.show()\n#Plot Line Graph of prices of homes\n#Y = Price up to 2 million\ndf.plot.line(y='Price', use_index=True, ylim=(0,1000000))\nX = df[['Beds','Baths','Sqft']]\ny = df['Price']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101) \nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,y_train)\nprint(lm.intercept_)\nlm.coef_\npredictions = lm.predict(X_test)\npredictions\ny_test\n#scatter plot that shows atual prices of homes and predicted prices of home and how they compare\nimport matplotlib.pyplot as plt\n_, ax = plt.subplots()\n\nax.scatter(x = range(0, y_test.size), y=y_test, c = 'blue', label = 'Actual', alpha = 0.3)\nax.scatter(x = range(0, predictions.size), y=predictions, c = 'red', label = 'Predicted', alpha = 0.3)\n\nplt.title('Actual and predicted values')\nplt.xlabel('Observations')\nplt.ylabel('Prices')\nplt.legend()\nplt.show()\n", "params": {}}